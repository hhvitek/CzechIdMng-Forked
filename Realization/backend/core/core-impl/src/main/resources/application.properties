######
## Test properties only - its needed here for tests in other modules...
######
#
#
#
# https://docs.spring.io/spring-boot/docs/1.3.8.RELEASE/reference/html/common-application-properties.html
#
# active spring profile
spring.profiles.active=${spring.profiles.active}
spring.resources.add-mappings=false
#
## jpa
# ZonedDateTime is stored in UTC
spring.jpa.properties.hibernate.jdbc.time_zone=UTC
# Driver (e.g. postgres) does not support contextual LOB creation
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
# connection pool setting
# https://github.com/brettwooldridge/HikariCP#configuration-knobs-baby
spring.datasource.maximumPoolSize=50
# spring.datasource.idleTimeout=60000
spring.datasource.pool-name=corePool
spring.logging-datasource.pool-name=loggingPool
# flag with added mod columns to all attributes
# spring.jpa.properties.org.hibernate.envers.global_with_modified_flag=true
spring.jpa.properties.org.hibernate.envers.audit_table_suffix=_a
spring.jpa.properties.org.hibernate.envers.global_with_modified_flag=true
spring.jpa.properties.org.hibernate.envers.modified_flag_suffix=_m
spring.jpa.properties.org.hibernate.envers.audit_strategy=eu.bcvsolutions.idm.core.model.repository.listener.IdmAuditStrategy
spring.jpa.properties.hibernate.session_factory.interceptor=eu.bcvsolutions.idm.core.model.repository.listener.AuditableInterceptor
spring.jpa.properties.hibernate.listeners.envers.autoRegister=true
spring.jpa.hibernate.use-new-id-generator-mappings=false
#
# Spring Data Rest basic configuration
# http://docs.spring.io/spring-data/rest/docs/current/reference/html/#_changing_other_spring_data_rest_properties
spring.data.rest.basePath=/api
spring.data.rest.returnBodyOnCreate=true
spring.data.rest.returnBodyOnupdate=true
spring.data.rest.defaultPageSize=10
spring.data.rest.max-page-size=10000
#
# Show thread name configured by thread pools (task, event) in logs (generated name is shown otherwise)
# Two appenders 'console' and 'file' are provided by product. Same configuration is needed for your custom appenders (added in logback.xml).
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} %5level %relative --- [%thread] %logger{36}.%M : %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss.SSS} %5level %relative --- [%thread] %logger{36}.%M : %msg%n
#
# String boot properties for Activiti workflow engine
# https://github.com/Activiti/Activiti/blob/master/modules/activiti-spring-boot/spring-boot-starters/activiti-spring-boot-starter-basic/src/main/java/org/activiti/spring/boot/ActivitiProperties.java
spring.activiti.databaseSchemaUpdate=true
# disable automatic jpa entities persisting
spring.activiti.jpaEnabled=false
# Automatic process deployment
spring.activiti.checkProcessDefinitions=true
spring.activiti.processDefinitionLocationPrefix=classpath*:eu/bcvsolutions/idm/workflow/
spring.activiti.processDefinitionLocationSuffixes=**/**.bpmn20.xml
#
# Check that the templates location exists is disabled not
spring.velocity.checkTemplateLocation=false
spring.velocity.resourceLoaderPath=classpath*:eu/bcvsolutions/idm/templates/
#
# Swagger config
# doc endpoint
#springfox.documentation.swagger.enabled=true
#springfox.documentation.swagger.v2.path=/api/doc
springdoc.swagger-ui.enabled=true
springdoc.swagger-ui.path=/api/doc
#
# Cipher secret key for crypt values in confidential storage
# for crypt values is used secretKey or secretKey defined by file - secretKeyPath
# Can be empty => confidential storage will not be crypted, application cannot be used in production (dev, test only).
cipher.crypt.secret.key=
# cipher.crypt.secret.keyPath=/path/to/key
#
# use cglib for proxies by default
spring.aop.proxy-target-class=true
#
# Application instance / server id
idm.pub.app.instanceId=idm-primary
# Create init data at application start. Init data (product provided roles) are updated automatically with pruct updates.
# Set property to false to disable init data creation and updates.
idm.sec.core.init.data.enabled=true
#
# Enable flyway migrations.
# @see https://proj.bcvsolutions.eu/ngidm/doku.php?id=navrh:databazove_scripty
spring.flyway.enabled=false
spring.flyway.check-location=false
#
# Scheduler
scheduler.enabled=true
scheduler.task.queue.process=1000
scheduler.event.queue.process=500
scheduler.event.executor.queueCapacity=50
# Asynchronous task processing is stopped.
# Asynchronous task processing is stopped, when instance for processing is switched => prevent to process asynchronous task in the meantime.
# Asynchronous task processing can be stopped for testing or debugging purposes.
# Asynchronous task are still created in queue, but they are not processed automatically - task can be executed manually from ui.
idm.sec.core.scheduler.task.asynchronous.stopProcessing=false
#
# Asynchronous event processing
# disable / enable asynchronous event processing. Events will be executed synchronously, if it's disabled. Enabled by default.
idm.sec.core.event.asynchronous.enabled=true
# Asynchronous event processing is stopped.
# Event processing is stopped, when instance for processing is switched => prevent to process instances in the meantime.
# Asynchronous event processing can be disabled for testing or debugging purposes.
# Events are still created in queue, but they are not processed.
idm.sec.core.event.asynchronous.stopProcessing=false
# Asynchronous events will be executed on server instance with id. Default is the same as {@link ConfigurationService#getInstanceId()} (current server instance).
idm.sec.core.event.asynchronous.instanceId=
# Asynchronous events will be executed in batch - batch will be split for event with HIGH / NORMAL priority in 70% HIGH / 30% NORMAL.
# If you events are processed quickly (~provisioning on your environment is quick), then batch size can be higher (in combination with higher 'scheduler.event.queue.process' property).
idm.sec.core.event.asynchronous.batchSize=15
#
idm.pub.core.version=${project.version}
# supports delete identity
idm.pub.core.identity.delete=true
#
# default password change type for custom users, one of values (get from this enum: PasswordChangeType):
# DISABLED - password change is disable
# ALL_ONLY - users can change passwords only for all accounts
# CUSTOM - users can choose for which accounts change password
idm.pub.core.identity.passwordChange=ALL_ONLY
#
# Create default identity's contract, when identity is created.
# Skipped in synchronizations - contract synchronization should be provided.
idm.sec.core.identity.create.defaultContract.enabled=
# Creates default identity's contract with configured position name.
idm.sec.core.identity.create.defaultContract.position=Default
# Creates default identity's contract with configured state. Valid contract will be crated by default, other possible values:
# EXCLUDED - Excluded from evidence - remains valid, but roles assigned for this contract are not added for logged identity.
# DISABLED - Invalid by user - not changed by dates.
idm.sec.core.identity.create.defaultContract.state=
# Number of days related to current date - will be used for set contract valid till date (current date + expiration in days = valid till).
# Contact valid till will not be set by default (~ contract expiration is not configured by default).
idm.sec.core.identity.create.defaultContract.expiration=
#
# supports authorization policies for extended form definitions and their values
idm.sec.core.identity.formAttributes.secured=false
#
# Profile image max file size in readable string format (e.g. 200KB).
idm.sec.core.identity.profile.image.max-file-size=512KB
#
# Default user role will be added automatically, after an identity is logged in
# could contains default authorities and authority policies configuration
# for adding autocomplete or all record read permission etc.
# Role full code should be given (should contain environment, if it is used).
# Role authorities are updated automatically, when new IdM version is installed.
idm.sec.core.role.default=userRole
#
# Admin user role
# Role full code should be given (should contain environment, if it is used).
# Role authorities are updated automatically, when new IdM version is installed.
idm.sec.core.role.admin=superAdminRole
#
# Helpdesk user role
# Role full code should be given (should contain environment, if it is used).
# Role authorities are updated automatically, when new IdM version is installed.
idm.sec.core.role.helpdesk=helpdeskRole
#
# User manager role
# Role full code should be given (should contain environment, if it is used).
# Role authorities are updated automatically, when new IdM version is installed.
idm.sec.core.role.userManager=userManagerRole
#
# Role manager role - role guarantee
# Role full code should be given (should contain environment, if it is used).
# Role authorities are updated automatically, when new IdM version is installed.
idm.sec.core.role.roleManager=roleManagerRole
#
# Separator for the suffix with environment used in role code.
# Look out: when separator is changed, then all roles should be updated (manually from ui, by scripted LRT or by change script).
idm.sec.core.role.codeEnvironmentSeperator=|
#
# Properties for load template from templates folders by modules
idm.sec.core.notification.template.folder=classpath*:/eu/bcvsolutions/idm/templates/
idm.sec.core.notification.template.fileSuffix=**/**.xml
#
# Properties for load script from folders by module
idm.sec.core.script.folder=classpath*:/eu/bcvsolutions/idm/scripts/
idm.sec.core.script.fileSuffix=**/**.xml
#
# Approve by manager
idm.sec.core.wf.approval.manager.enabled=false
# Approve by security department
idm.sec.core.wf.approval.security.enabled=false
idm.sec.core.wf.approval.security.role=Security
# Approve by helpdesk department
idm.sec.core.wf.approval.helpdesk.enabled=false
idm.sec.core.wf.approval.helpdesk.role=Helpdesk
# Approve by usermanager department
idm.sec.core.wf.approval.usermanager.enabled=false
idm.sec.core.wf.approval.usermanager.role=Usermanager
# Approval wf by role priority
idm.sec.core.wf.role.approval.1=approve-role-by-manager
idm.sec.core.wf.role.approval.2=approve-role-by-guarantee
idm.sec.core.wf.role.approval.3=approve-role-by-guarantee-security
# Approval wf for unassign role (one remove WF for whole application)
idm.sec.core.wf.role.approval.remove=approve-remove-role-by-manager
# Enable sending notification of changing roles to user, whose account will be modified
# idm.sec.core.wf.notification.applicant.enabled=false
# Enable sending notification of changing roles to user, who made request
idm.sec.core.wf.notification.implementer.enabled=true
#
# configuration property for default backup
# idm.sec.core.backups.default.folder.path=/tmp/backup
#
## Attachment manager
# attachments will be stored under this path.
# new directories for attachment will be created in this folder (permissions has to be added)
# System.getProperty("user.home")/idm_data will be used if no path is given
# idm.sec.core.attachment.storagePath=/opt/data
# temporary files for attachment processing (e.g. temp files for download / upload)
# getStoragePath()/temp will be used if no path is given
# idm.sec.core.attachment.tempPath=/opt/data/temp
# temporary file time to live in milliseconds
# older temporary files will be purged, default 14 days
idm.sec.core.attachment.tempTtl=1209600000
#
# Max file size of uploaded file. Values can use the suffixed "MB" or "KB" to indicate a Megabyte or Kilobyte size.
# Application server (e.g. Tomcat "maxSwallowSize" connector parameter) has to be set properly too (e.g. <Connector port="8080" maxSwallowSize="-1" ...)
spring.servlet.multipart.max-file-size=100MB
spring.servlet.multipart.max-request-size=100MB
#
# Enable / disable check filter is properly registered, when filter is used (by entity and property name). 
# Throws exception, when unrecognized filter is used.
idm.sec.core.filter.check.supported.enabled=true
# Check count of values exceeded given maximum. 
# Related to database count of query parameters (e.g. Oracle = {@code 1000}, MSSql = {@code 2100}).
# Throws exception, when size is exceeded. Set to {@code -1} to disable this check.
idm.sec.core.filter.check.size.maximum=500
#
# CAS authentication filter
# Enable authentication via CAS. If enabled, "idm.sec.core.cas.url" become mandatory and must be set for SSO authentication via CAS to work. Default: false
idm.pub.core.cas.enabled=false
# Other properties
# Base URL where CAS is accessible. Syntax of this field is https://hostname-of-CAS/URI.
idm.sec.core.cas.url=
# IdM service name configured as service on CAS server. 
# When service is configured, then login and logout redirect urls, should be defined directly in CAS service configuration.
# Default: service name for login / logout is created dynamically by BE server url (recommended).
idm.sec.core.cas.service=
# Suffix which is, in effect, appended to idm.sec.core.cas.url. Resulting URL is used for login operation in CAS. It must start with slash (eg. /login).
idm.sec.core.cas.login-path=/login
# Suffix which is appended to idm.sec.core.cas.url. Resulting URL is used for single sign-out operation. It must start with slash (eg. /logout).
idm.sec.core.cas.logout-path=/logout
# Ticket can be given as request parameter (recommended, configured by default).
idm.sec.core.cas.parameter-name=ticket
# Header name in which CAS sends the ticket value. Ticket can be given as request header. Not configured by default.
idm.sec.core.cas.header-name=
# Path to CzechIdM for the HTTP Referer header used by CAS while redirecting back to application. This value is concatenated with CAS ticket to form Referer header. Syntax of this field is https://hostname-of-CzechIdM/URI/?ticket=. Not configured by default.
idm.sec.core.cas.header-prefix=
#
# Override default lazy initialization for spring beans introduced in Spring Boot 2.2
spring.main.lazy-initialization=false